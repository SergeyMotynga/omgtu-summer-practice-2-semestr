#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!csharp

public interface ICommand
{
    bool isCompleted{get;}
    void Execute();
}

#!csharp

#r "nuget: xunit, 2.8.1"
using System;
using System.Collections.Concurrent;
using System.Threading;
using Xunit;

public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}
public class RoundRobin: IScheduler{
    Queue<ICommand> commands = new Queue<ICommand>();
    public bool HasCommand(){
        return commands.Count > 0;
    }
    public ICommand Select(){
        if(!HasCommand()){
            return null;
        }
        ICommand cmd = commands.Dequeue();
        if (!cmd.isCompleted)
        {
            commands.Enqueue(cmd);
        }
        return cmd;
    }
    public void Add(ICommand cmd){
        commands.Enqueue(cmd);
    }
}
public class HardStop: ICommand{
    ServerThread thread;
    public bool isCompleted{get;set;}
    public HardStop(ServerThread thread) {
        this.thread = thread;
        isCompleted = false;
    }
    public void Execute() {
        Assert.Equal(thread.GetThread(), Thread.CurrentThread);
        thread.Stop();
        isCompleted = true;
    }
}
public class SoftStop: ICommand{
    ServerThread thread;
    public bool isCompleted{get;set;}
    public SoftStop(ServerThread thread) {
        this.thread = thread;
        isCompleted = false;
    }
    public void Execute() {
        Assert.Equal(thread.GetThread(), Thread.CurrentThread);
        thread.QueueIsEmpty();
        isCompleted = true;
    }
}
public class ServerThread{
    Thread thread;
    bool isRunning = true;
    bool queueIsEmpty = false;
    ConcurrentQueue<ICommand> commands = new ConcurrentQueue<ICommand>();
    IScheduler scheduler;
    public ServerThread(IScheduler scheduler){
        this.scheduler = scheduler;
        thread = new Thread(Run);
        thread.Start();
    }
    public void EnqueueCommand(ICommand command){
        commands.Enqueue(command);
    }
    public void Run(){
        while(isRunning){
            ICommand command = null;
            if(scheduler.HasCommand()){
                command = scheduler.Select();
            }
            else if(commands.TryDequeue(out command)){
                scheduler.Add(command);
            }
            if(command != null){
                command.Execute();
            }
            else if(queueIsEmpty && commands.IsEmpty && !scheduler.HasCommand()){
                isRunning = false;
                break;
            }
        }
    }
    public Thread GetThread(){
        return thread;
    }
    public void Stop(){
        isRunning = false;
    }
    public void QueueIsEmpty(){
        queueIsEmpty = true;
    }
}
public class Imition : ICommand{
    int id;
    int count = 1;
    int maxCount = 0;
    public bool isCompleted{get; set; }
    public Imition(int id, int maxCount){
        this.id = id;
        isCompleted = false;
        this.maxCount = maxCount;
    }
    public void Execute(){
        Console.WriteLine($"Выполнилась команда {id}, шаг {count}.");
        count++;
        if(count == maxCount){
            isCompleted = true;
        }
    }
}

#!csharp

IScheduler scheduler = new RoundRobin();
var serverThread = new ServerThread(scheduler);
for (int i = 1; i < 4; i++)
{
    serverThread.EnqueueCommand(new Imition(i,3));
    if(i == 2) serverThread.EnqueueCommand(new SoftStop(serverThread));
}
for(int i = 4; i < 5; i++){
    serverThread.EnqueueCommand(new Imition(i,2));
}
serverThread.GetThread().Join();
Console.WriteLine("Выполнилась мягкая остановка.");
serverThread = new ServerThread(scheduler);
for(int i = 1; i < 4; i++){
    serverThread.EnqueueCommand(new Imition(i,4));
    if(i == 2) serverThread.EnqueueCommand(new HardStop(serverThread));
}
serverThread.GetThread().Join();
Console.WriteLine("Выполнилась жёсткая остановка.");

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.

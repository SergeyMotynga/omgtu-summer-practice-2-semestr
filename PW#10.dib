#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №10. Доставка сообщений до Команды.

**Цель:** Предоставить возможность обмена данными для длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Отправлять сообщения длительной операции.

## Задание.
Поскольку длительная операция выполняется в течение некоторого момента времени, то может возникнуть необходимость
в предоставлении дополнительной информации, влияющей на ход выполнения. Поскольку Команды и источник данных часто находятся в разных потоках,
то сделать это надо потоко-безопасным образом. Самый простой способ - используя идиому Производитель-Поребитель, в нашем случае - очередь.

Набор данных, предназначенных для Команды будем называть сообщением. Можно использовать любую подходящую конструкцию языка программирования для 
представления сообщения. Необходимо учесть, что скорость доставки сообщений может быть выше, чем скорость обработки, а значит очередь сообщений должна быть
у каждой Длительной операции. При этом потоко-безопасные очереди требуют системных ресурсов, а значит, чтобы не получить ограничение на максимальное количество
одновремнно работающих длительных Команд, нельзя использовать потоко-безопасные очереди. 

Возможный вариант реализации - оставить одну потоко-безопасную очередь для потока, а для Команд использовать обычные очереди. Осталось только решить, как сообщение
излеченное из очереди потока попадет в очередь Команды. Один из возможных вариантов:
1. Каждая команда имеет уникальный идентификатор.
2. Сообщение содержит уникальный идентификатор Команлды, которому оно адресовано.
3. Для потока создаем специальную Длительную Команду, которая назвается Роутером. Он хранит коллекцию пар (id Команды, ссылка на очередь Команды). При вызове метода Execute этой 
Роутера, если очередь потока не пуста, происходит чтение очередного сообщения и по id Команды определяется очередь, куда это сообщение записывается.
Если id Команды не определен, на консоль выводится сообщение о невозможности доставить сообщение неизвестному адресату.
При старте новой Команды, ее очередь необходимо добавить в коллекцию Роутера. При остановке Команды - очередь удаляется из коллекции Роутера.

Продемонстрировать работу Роутера на двух Длительных Командах и на отправке сообщения несуществующей Команде.

**Материалы для самостоятельного изучения**.
1. [Паттерн Сообщение](https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html)
2. [Паттерн Роутер - весь раздел про Роутеры](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageRoutingIntro.html)
3. [Обмен сообщеними](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageConstructionIntro.html)

#!csharp

public interface ICommand
{
    void Execute();
    bool IsCompleted { get; }
}

#!csharp

using System;
using System.Threading;

public class Message{
    public int CommandId { get; }
    public string Data { get; }
    public Message(int commandId, string data){
        CommandId = commandId;
        Data = data;
    }
}
public class LongRunningCommand : ICommand{
    Queue<Message> _messages = new Queue<Message>();
    int _id;
    bool _isCompleted;
    public LongRunningCommand(int id){
        _id = id;
    }
    public void EnqueueMessageInCommand(Message messagge){
        _messages.Enqueue(messagge);
    }
    public void Execute(){
        if (_messages.Count != 0){
            var message = _messages.Dequeue();
            Console.WriteLine($"Команда {_id} обработала сообщение: {message.Data}");
        }
        else{
            _isCompleted = true;
        }
    }
    public bool IsCompleted => _isCompleted;
}
public class Router : ICommand{
    Dictionary<int, Queue<Message>> _commandQueues = new Dictionary<int, Queue<Message>>();
    Queue<Message> _globalQueue = new Queue<Message>();
    bool _isCompleted;
    public void RegisterCommand(int commandId, Queue<Message> commandQueue){
        _commandQueues[commandId] = commandQueue;
    }
    public void EnqueueMessage(Message message){
        _globalQueue.Enqueue(message);
    }
    public void Execute(){
        if (_globalQueue.Count > 0){
            var message = _globalQueue.Dequeue();
                LongRunningCommand command = new LongRunningCommand(message.CommandId); 
            if (_commandQueues.TryGetValue(message.CommandId, out Queue<Message> commandQueue)){
                command.EnqueueMessageInCommand(message);
                if(!command.IsCompleted){
                    command.Execute();
                }
                commandQueue.Enqueue(message);
            }
            else{
                Console.WriteLine($"Не удалось доставить сообщение '{message.Data}', неизвестная команда {message.CommandId}");
            }
        }
        else{
            _isCompleted = true;
        }
    }
    public bool IsCompleted => _isCompleted;
}

#!csharp

Router router = new Router();
LongRunningCommand command1 = new LongRunningCommand(1);
LongRunningCommand command2 = new LongRunningCommand(2);
router.RegisterCommand(1, new Queue<Message>());
router.RegisterCommand(2, new Queue<Message>());
router.EnqueueMessage(new Message(1, "Для команды 1"));
router.EnqueueMessage(new Message(2, "Для команды 2"));
router.EnqueueMessage(new Message(2, "Для команды 2 2x"));
router.EnqueueMessage(new Message(3, "Это для несуществующей команды"));
while (!router.IsCompleted){
    router.Execute();
}
